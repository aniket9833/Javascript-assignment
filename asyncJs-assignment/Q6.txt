Q6.Describe the purpose and usage of the localStorage and sessionStorage APIs in web development. Give
suitable examples for each.

ans:
localStorage and sessionStorage APIs

Both `localStorage` and `sessionStorage` are part of the Web Storage API, which allows you to store data on the client side. They are similar in many ways but have key differences in terms of data persistence.

localStorage
Purpose: `localStorage` is used to store data with no expiration time. This means the data persists even after the browser is closed and reopened.

Usage:
- Storing User Preferences: We can store user settings or preferences that should be available across sessions.
- Caching Data: Cache data that doesn't change often to reduce server requests.


Example:
```javascript
// Store data
localStorage.setItem('username', 'JohnDoe');

// Retrieve data
let username = localStorage.getItem('username');
console.log(username); // Output: JohnDoe

// Remove data
localStorage.removeItem('username');

// Clear all data
localStorage.clear();
```

sessionStorage
Purpose: `sessionStorage` is used to store data for the duration of the page session. The data is cleared when the page session ends, which happens when the browser or tab is closed.

Usage:
- Temporary Data Storage: Store data that is only needed for the duration of the page session, such as form data or temporary state.
- Single-Session Data: Useful for data that should not persist beyond the current session.

Example:
```javascript
// Store data
sessionStorage.setItem('sessionID', '123456');

// Retrieve data
let sessionID = sessionStorage.getItem('sessionID');
console.log(sessionID); // Output: 123456

// Remove data
sessionStorage.removeItem('sessionID');

// Clear all data
sessionStorage.clear();
```

Key Differences
1. Persistence:
   - `localStorage`: Data persists until explicitly deleted.
   - `sessionStorage`: Data persists only for the duration of the page session.

2. Scope:
   - `localStorage`: Shared across all tabs and windows with the same origin.
   - `sessionStorage`: Unique to each tab or window.

3. Use Cases:
   - `localStorage`: Ideal for long-term storage of data like user preferences, themes, or cached data.
   - `sessionStorage`: Best for temporary data that should not persist beyond the current session, like form inputs or session-specific settings.

Both APIs provide a simple and effective way to store data on the client side, enhancing the user experience by maintaining state and preferences.
